swirl()
load(swirl)
library(swirl)
swirl()
library(swirl)
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
hc
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=.4, col="red")
5
abline(h=.05)
12
abline(h=.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
denmt
plot(denmt)
distmt
cmat
points(cx, cy, col=c("red","orange","purple"),pch=3, cex=2, lwd=)
points(cx, cy, col=c("red","orange","purple"),pch=3, cex=2, lwd=2)
mdist(x,y,cx,cy)
apply(distTmp, 2, which.min)
points(x ,y, pch=19, cex=2, col=cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x,y,newCx, newCy)
swirl()
swirl()
library(swirl)
swirl()
bye
swirl()
swirl()
cmat
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
apply(distTmp,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame,centers=3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2] %*%  diag(svd1$d[1:2])  %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*%  diag(svd1$d[1:5])  %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*%  diag(svd1$d[1:10])  %*% t(svd1$v[,1:10]))
swirl()
dim(ssd)
names*562,563
names(562,563)
names(562:563)
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
swirl()
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart=100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying, 1:12],pch=19,ylab="Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12],pch=19,ylab="Walkdown Cluster")
library(swirl)
swirl()
dim(1999)
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, '|', fixed = TRUE)
cnames
make.names <- cnames[[1]][wcol]
names(pm) <- make.names(cnames[[1]][wcol])
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]], wcol)
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 < pm1$Sample.Value
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1)
boxplot(log10(x0), log10(x1))
negative <- x1<0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
dates
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
head(both)
both
head(pm0)
cnt0 <- subset(pm0, pm0$State.Code==36 & pm0$county.site%in%both)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm0sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow=c(1,2), c(4,4,2,1))
par(mfrow=c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch=20)
abline(median(x0sub, na.rm = TRUE), lwd=2)
abline(h=median(x0sub, na.rm = TRUE), lwd=2)
plot(dates1, x1sub, pch=20)
abline(h=median(x1sub, na))
abline(h=median(x1sub, na=TRUE), lwd=2)
swirl()
swirl()
swirl()
swirl()
swirl()\
swirl()
library(swirl)
swirl()
swirl()
rm()
library(swirl)
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames or print(cnames)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
omnitest(correctVal='The median of x1 is less than the median of x0')
negative <- x1 < 0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative],"month")
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code==63 & Site.ID==2008)
pm1sub <- subset(cnt1, County.Code==63 & Site.ID==2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date),"%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date),"%Y%m%d")
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
plot(dates0, x0sub, pch = 20)
abline(h = median(x0sub, na.rm = TRUE),lwd=2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE),lwd=2)
rng <- range(x0sub,x1sub,na.rm=TRUE)
rng
mn0 <- with(pm0,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn0)
mn1 <- with(pm1,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state")
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1, 52), mrg[, 2], xlim = c(.5, 2.5)))
with(mrg, points(rep(2, 52), mrg[, 3]))
segments(rep(1, 52), mrg[, 2], rep(2, 52), mrg[, 3])
mrg[mrg$mean.x < mrg$mean.y,]
library(dplyr)
library(tidyr)
library(ggplot2)
library(dplyr)
library(tidyr)
library(ggplot)
library(ggplot2)
setwd("~/Documents/GitHub/storms")
input <- read.csv(file = "repdata_data_StormData.csv", sep = ",", stringsAsFactors = FALSE)
head(input)
input$BGN_DATE <- as.Date(input$BGN_DATE, "%m/%d/%Y %H:%M:%S")
summary(input$BGN_DATE)
recentdata <- input[input$BGN_DATE > as.Date("2002-01-01", "%Y%m%d"),]
selectNames <- c("EVTYPE","FATALITIES","INJURIES","PROPDMG","CROPDMG","CROPDMGEXP")
data <- select(recentdata, selectNames)
data$EVTYPE[grepl("FLOOD", data$EVTYPE, ignore.case = TRUE)] <- "FLOOD"
data$EVTYPE[grepl("TORNADO", data$EVTYPE, ignore.case = TRUE)] <- "TORNADO"
data$EVTYPE[grepl("TSTM|THUNDERSTORM", data$EVTYPE, ignore.case = TRUE)] <- "TSTM"
data$EVTYPE[grepl("TROPICAL|STORM", data$EVTYPE, ignore.case = TRUE)] <- "STORM"
data$EVTYPE[grepl("HURRICANE", data$EVTYPE, ignore.case = TRUE)] <- "HURRICANE"
data$EVTYPE[grepl("ICE|SNOW|FROST|SLEET", data$EVTYPE, ignore.case = TRUE)] <- "SNOW"
data$EVTYPE[grepl("FOG", data$EVTYPE, ignore.case = TRUE)] <- "FOG"
data$EVTYPE[grepl("COLD|WINDCHILL|FREEZE|WINTER", data$EVTYPE, ignore.case = TRUE)] <- "COLD"
data$EVTYPE[grepl("HEAT|WARM|HOT", data$EVTYPE, ignore.case = TRUE)] <- "HEAT"
data$EVTYPE[grepl("CLOUD|FUNNEL", data$EVTYPE, ignore.case = TRUE)] <- "CLOUD"
data$EVTYPE[grepl("HAIL", data$EVTYPE, ignore.case = TRUE)] <- "HAIL"
data$EVTYPE[grepl("DROUGHT|DRY", data$EVTYPE, ignore.case = TRUE)] <- "DROUGHT"
data$EVTYPE[grepl("LIGHTNING", data$EVTYPE, ignore.case = TRUE)] <- "LIGHTNING"
data$EVTYPE[grepl("FIRE", data$EVTYPE, ignore.case = TRUE)] <- "FIRE"
data$EVTYPE[grepl("RAIN|SHOWER", data$EVTYPE, ignore.case = TRUE)] <- "RAIN"
data$EVTYPE[grepl("WATERSPOUT", data$EVTYPE, ignore.case = TRUE)] <- "WATERSPOUT"
data$EVTYPE[grepl("SURF", data$EVTYPE, ignore.case = TRUE)] <- "SURF"
data$EVTYPE[grepl("CURRENT", data$EVTYPE, ignore.case = TRUE)] <- "CURRENT"
data$EVTYPE[grepl("WIND|MICROBURST", data$EVTYPE, ignore.case = TRUE)] <- "WIND"
data$EVTYPE[grepl("BLIZZARD", data$EVTYPE, ignore.case = TRUE)] <- "BLIZZARD"
data$EVTYPE[grepl("SLIDE", data$EVTYPE, ignore.case = TRUE)] <- "LANDSLIDE"
data$EVTYPE[grepl("DUST", data$EVTYPE, ignore.case = TRUE)] <- "DUST"
data$EVTYPE<-factor(data$EVTYPE)
data$PROPDMGEXP<-recode(data$PROPDMGEXP,'K'=1000,'M'=1000000,'B'=1000000000,.default=1)
data$CROPDMGEXP<-recode(data$CROPDMGEXP,'K'=1000,'M'=1000000,'B'=1000000000,.default=1)
data$PROPDMGVALUE <- data$PROPDMG*data$PROPDMGEXP
data$CROPDMGVALUE <- data$CROPDMG*data$CROPDMGEXP
healthdata<-(data %>% group_by(EVTYPE) %>% summarise(FATALITIES = sum(FATALITIES),INJURIES = sum(INJURIES) ) %>% arrange(desc(FATALITIES+INJURIES)))
mostHarm<-healthdata[1:10,]
print(mostHarm)
data$EVTYPE
library(dplyr)
library(tidyr)
library(ggplot2)
input <- read.csv(file = "repdata%2Fdata%2FStormData.csv", sep = ",", stringsAsFactors = FALSE)
getwd()
input <- read.csv(file = "repdata%2Fdata%2FStormData.csv", sep = ",", stringsAsFactors = FALSE)
input <- read.csv(file = "repdata%2Fdata%2FStormData.csv", sep = ",", stringsAsFactors = FALSE)
input <- read.csv(file = "StormData.csv", sep = ",", stringsAsFactors = FALSE)
input <- read.csv(file = "repdata_data_StormData.csv", sep = ",", stringsAsFactors = FALSE)
selectNames <- c("EVTYPE","FATALITIES","INJURIES","PROPDMG","PROPDMGEXP" ,"CROPDMG","CROPDMGEXP")
data<-select(recentdata, selectNames)
recentdata<-input[input$BGN_DATE>as.Date("2002-01-01", "%Y-%m-%d"),]
summary(input$BGN_DATE)
input <- read.csv(file = "repdata_data_StormData.csv", sep = ",", stringsAsFactors = FALSE)
input$BGN_DATE <- as.Date(input$BGN_DATE, "%m/%d/%Y %H:%M:%S")
summary(input$BGN_DATE)
recentdata<-input[input$BGN_DATE>as.Date("2002-01-01", "%Y-%m-%d"),]
selectNames <- c("EVTYPE","FATALITIES","INJURIES","PROPDMG","PROPDMGEXP" ,"CROPDMG","CROPDMGEXP")
data<-select(recentdata, selectNames)
data$PROPDMGEXP<-recode(data$PROPDMGEXP,'K'=1000,'M'=1000000,'B'=1000000000,.default=1)
data$CROPDMGEXP<-recode(data$CROPDMGEXP,'K'=1000,'M'=1000000,'B'=1000000000,.default=1)
data$PROPDMGVALUE <- data$PROPDMG*data$PROPDMGEXP
data$CROPDMGVALUE <- data$CROPDMG*data$CROPDMGEXP
healthdata<-(data %>% group_by(EVTYPE) %>% summarise(FATALITIES = sum(FATALITIES),INJURIES = sum(INJURIES) ) %>% arrange(desc(FATALITIES+INJURIES)))
mostHarm<-healthdata[1:10,]
mostHarm
plotdata<-gather(mostHarm, TYPE, VALUE, FATALITIES:INJURIES)
ggplot(plotdata, aes(x=reorder(EVTYPE,-VALUE), y=VALUE, fill=TYPE))+geom_bar(stat="identity")+labs(title="Harmful Events to Population Health", x="Event Type", y="Count")
econdata<-(data %>% group_by(EVTYPE) %>% summarise(PROPDMGVALUE = sum(PROPDMGVALUE),CROPDMGVALUE = sum(CROPDMGVALUE) ) %>% arrange(desc(PROPDMGVALUE+CROPDMGVALUE)))
mostEcon<-econdata[1:10,]
plotdata2<-gather(mostEcon, TYPE, VALUE, PROPDMGVALUE:CROPDMGVALUE)
ggplot(plotdata2, aes(x=reorder(EVTYPE,-VALUE), y=VALUE, fill=factor(TYPE, labels=c("crop damage", "property damage"))))+geom_bar(stat="identity")+labs(title="Economically Harmful Events", x="Event Type", y="Count")+guides(fill = guide_legend(title = "Type of damage"))
getwd()
### Results
The following code generated the figures below:
```plotdata<-gather(mostHarm, TYPE, VALUE, FATALITIES:INJURIES)```
```ggplot(plotdata, aes(x=reorder(EVTYPE,-VALUE), y=VALUE, fill=TYPE))+geom_bar(stat="identity")+labs(title="Harmful Events to Population Health", x="Event Type", y="Count")```
In the following figure ("Harmful Events to Population Health"), we see that **tornadoes** cause the greatest impact on **fatalities** and **injuries**.
```{r}
print()
```
library
library(knitr)
```{r}
print(3+12.456)
```
```{r}
print(3+12.456)
```
```{r}
print(3+12.456)
```
```{r}
print(3+12.456)
```
```{r}
print(3+12.456)
```
if (!file.exists("activity.csv") )
{
dlurl <- 'http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip'
download.file(dlurl,destfile='repdata_data_activity.zip',mode='wb')
unzip('repdata_dat_Factivity.zip')
}
# Read data
data <- read.csv("activity.csv")
if (!file.exists("activity.csv") )
{
dlurl <- 'https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip'
download.file(dlurl,destfile='repdata_data_activity.zip',mode='wb')
unzip('repdata_dat_Factivity.zip')
}
# Read data
data <- read.csv("activity.csv")
setwd("~/Documents/GitHub/Activity-Monitoring-Data")
if (!file.exists("activity.csv") )
{
dlurl <- 'https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip'
download.file(dlurl,destfile='repdata_data_activity.zip',mode='wb')
unzip('repdata_dat_Factivity.zip')
}
# Read data
data <- read.csv("activity.csv")
if (!file.exists("activity.csv") )
{
dlurl <- 'https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip'
download.file(dlurl,destfile='repdata_data_activity.zip',mode='wb')
unzip('repdata_dat_Factivity.zip')
}
# Read data
data <- read.csv("activity.csv")
setwd("~/Documents/GitHub/Activity-Monitoring-Data")
if (!file.exists("activity.csv") )
{
dlurl <- 'https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip'
download.file(dlurl,destfile='repdata_data_activity.zip',mode='wb')
unzip('repdata_dat_Factivity.zip')
}
# Read data
data <- read.csv("activity.csv")
setwd("~/Documents/GitHub/Activity-Monitoring-Data")
if (!file.exists("activity.csv") )
{
dlurl <- 'https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip'
download.file(dlurl,destfile='repdata_data_activity.zip',mode='wb')
unzip('repdata_data_activity.zip')
}
# Read data
data <- read.csv("activity.csv")
hr_max
hr_max
setwd("~/Documents/GitHub/Activity-Monitoring-Data")
if (!file.exists("activity.csv") )
{
dlurl <- 'https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip'
download.file(dlurl,destfile='repdata_data_activity.zip',mode='wb')
unzip('repdata_data_activity.zip')
}
# Read data
data <- read.csv("activity.csv",sep=',', header=TRUE)
head(data)
daily<-c()  # This will be the total number of steps taken per day
for (i in 1:61){ # total number of days in October and November is 31+30=61
start<-(i-1)*288+1  # 288 five-minute steps in a day; 24*60/5=288
last<-(i-1)*288+288
temp<-data[start:last,1]    # extracting all 5-minute steps for each day
daily<-c(daily,sum(temp))   # concatenating the daily totals
}
daily_noNA<-daily[!is.na(daily)]  # 8 NA's are removed
hist(daily_noNA, xlab="steps",ylab="Frequency",col="grey",border="black",
main="Histogram of the total number of steps taken each day")
mean(daily,na.rm = T)
median(daily, na.rm = T)
x<-data[,1]         # number of steps in 5-minute intervals
y<-matrix(x,288,61) # to get average of 5-minute intervals across all days
five_average <- apply(y,1,mean,na.rm = TRUE)  # 5-minute interval average number of steps taken,
# averaged across all days
plot(data$interval[1:288], five_average, type='l',col='black',
xlab='Intervals',lwd=3,
ylab='Average number of steps',
main ='Average number of steps taken in 5-minute interval, averaged across all days')
hr <- data$hour[1:288]
min <- data$minute[1:288]
hr_max <- hr[which(five_average==max(five_average))]
min_max <- min[which(five_average==max(five_average))]
cat('The maximum number of steps occurs at',hr_max,':',min_max)
